return(mode_i)
}
getInitMus <- function(x, maxGroups = 3){
z <- hist(x, plot = FALSE)
mode_i <- which(diff(sign(diff(c(0, z$counts))))==-2)
mode_i <- mode_i[z$counts[mode_i] >= 50]
mode_i <- groupNearModes(z, mode_i)
# If only one population is detected, try less smoothed histogram w/ Scott
if(length(mode_i) < 2){
z <- hist(x, breaks = "Scott", plot = FALSE)
mode_i <- which(diff(sign(diff(c(0, z$counts))))==-2)
mode_i <- mode_i[z$counts[mode_i] >= 50]
mode_i <- groupNearModes(z, mode_i)
}
# If still there is one population, increase number of breaks until 3/4s of the number of droplets
nbreaks <- length(z$breaks)
repeat{
if(length(mode_i) >= 2){
break
}
if(nbreaks >= length(x)*0.75){
warning("Only 1 population found")
return(mode_i)
}
nbreaks <- nbreaks + 1
z <- hist(x, breaks = nbreaks, plot = FALSE)
mode_i <- which(diff(sign(diff(c(0, z$counts))))==-2)
mode_i <- mode_i[z$counts[mode_i] >= 50]
mode_i <- groupNearModes(z, mode_i)
}
# Get top distant maxGroups modes with highest counts
modes <- z$mids[mode_i]
if(length(mode_i) > maxGroups){
cluster_membership <- cutree(hclust(dist(modes)), k = maxGroups)
modes <- sapply(unique(cluster_membership), function(x){
clusters_i <- mode_i[cluster_membership == x]
z$mids[clusters_i[which.max(z$counts[clusters_i])]]
})
}
# plot(z)
# abline(v=modes)
return(modes)
}
DropEmPCR <- function(vecFluo, volDrp, distr, maxGroups=3){
#' distr = c("mvn", "msn", "mvt", "mst")
#'
res <- em(vecFluo, distr=distr,volDrp = volDrp, maxGroups=maxGroups)
res_info <- get_resInfo(res, distr)
return(res_info)
}
get_resInfo <- function(res, distr){
res_info <- list()
G <- res$G
if(distr == "mst"){
estParam <- data.frame(Mu = c(res$em$modpts), Sigma = sqrt(c(res$em$sigma)), Df = res$em$dof, Skew = c(res$em$delta), MixProp = res$em$pro) %>%
mutate(NegThres = rep(res$negThres, nrow(.))) %>%
mutate(PosThres = rep(res$posThres, nrow(.))) %>%
arrange(Mu)
title <- bquote("Neg~"~t~"("~v==.(round(estParam[1,"Df"],2))~","~mu==.(round(estParam[1,"Mu"],2))~","~sigma==.(round(estParam[1,"Sigma"],2))~","~delta==.(round(estParam[1,"Skew"],2))~")")
subtitle <- bquote("Pos~"~t~"("~v==.(round(estParam[G,"Df"],2))~","~mu==.(round(estParam[G,"Mu"],2))~","~sigma==.(round(estParam[G,"Sigma"],2))~","~delta==.(round(estParam[G,"Skew"],2))~")")
if(G == 3){
res_info$desc <- bquote("Rain~"~t~"("~v==.(round(estParam[2,"Df"],2))~","~mu==.(round(estParam[2,"Mu"],2))~","~sigma==.(round(estParam[2,"Sigma"],2))~","~delta==.(round(estParam[2,"Skew"],2))~")")
}
}else if(distr == "mvt"){
estParam <- data.frame(Mu = c(res$em$modpts), Sigma = sqrt(c(res$em$sigma)), Df = res$em$dof, MixProp = res$em$pro) %>%
mutate(NegThres = rep(res$negThres, nrow(.))) %>%
mutate(PosThres = rep(res$posThres, nrow(.))) %>%
arrange(Mu)
title <- bquote("Neg~"~t~"("~v==.(round(estParam[1,"Df"],2))~","~mu==.(round(estParam[1,"Mu"],2))~","~sigma==.(round(estParam[1,"Sigma"],2))~")")
subtitle <- bquote("Pos~"~t~"("~v==.(round(estParam[G,"Df"],2))~","~mu==.(round(estParam[G,"Mu"],2))~","~sigma==.(round(estParam[G,"Sigma"],2))~")")
if(G == 3){
res_info$desc <- bquote("Rain~"~t~"("~v==.(round(estParam[2,"Df"],2))~","~mu==.(round(estParam[2,"Mu"],2))~","~sigma==.(round(estParam[2,"Sigma"],2))~")")
}
}
res_info$est_parameter <- estParam
res_info$classification <- res$classification
res_info$G <- G
res_info$emres <- res
res_info$title <- title
res_info$subtitle <- subtitle
return(res_info)
}
em <- function(drp, volDrp, distr, maxGroups=3){
getClusMemberProb <- function(emres){
clusterMem <- emres$tau
means <- emres$modpts
posClust <- which.max(means)
negClust <- which.min(means)
rainClust <- if(length(means)==3) which(means == median(means)) else NA
clusts <- c(posClust, negClust, rainClust)
names(clusts) <- c("pos", "neg", "rain")
clusts <- sort(clusts)
classification <- factor(names(clusts[emres$clust]), levels = c("pos", "neg",  "rain"))
print(paste("Negative Mu:", means[negClust], "Positive Mu:", means[posClust]))
if(!is.na(rainClust))
print(paste("Rain Mu:", means[rainClust]))
posMemberProb <- clusterMem[,posClust]
negMemberProb <- clusterMem[,negClust]
rainMemberProb <- clusterMem[,rainClust]
return(list(negMemberProb,posMemberProb, classification))
}
modes <- getInitMus(drp, maxGroups = maxGroups)
G <- length(modes)
initEMSkew <- list(mu = modes,
sigma = array(rep(1000, G), c(1,1,G)),
pro = rep(1/G, G),
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
# Manual - https://cran.r-project.org/web/packages/EMMIXskew/EMMIXskew.pdf; ncov = 3 means general variance (1 & 2 gives me equal variances)
drp <- data.frame(Fluorescence=sort(drp))
emres <- EmSkew(drp, init = initEMSkew, g = G, distr = distr, ncov = 3, debug = FALSE) # MAIN FUNCTION
.g(negMemberProb, posMemberProb, classification) %=% getClusMemberProb(emres)
nneg <- sum(classification == "neg")
res <- list()
res$est <- cal_concentration(nneg, nrow(drp),volDrp)
res$member <- list(negProb = negMemberProb, posProb = posMemberProb)
res$G <- G
res$em <- emres
res$classification <- classification
res$negThres <- drp[max(which(classification == "neg")),]
res$posThres <- drp[min(which(classification == "pos")),]
return(res)
}
x <- df_orig[463,-(1:11)] %>% t()
x <- x[!is.na(x)]
x <- prepareFlou(x)
hist(x)
z <- DropEmPCR(x, 0.85, "mvt")
z$desc
z$emres$est
z <- DropEmPCR(sim, 0.85, "mvt")
z$emres$est
sim <- read.csv("D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/simulated3/sim_concD_R1_rep3.csv")
sim <- sim[,"Target2"]
sim <- sim[!is.na(sim)]
sim <- prepareFlou(sim)
z <- DropEmPCR(sim, 0.85, "mvt")
z
z2 <- DropEmPCR(sim, 0.85, "mst")
z2$emres$est
table(z2$classification)
table(z$classification)
z$emres$est
library(dplyr)
library(magrittr)
setwd("D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation")
filesPerMethod <- list(
"cloudy"     = "Estimates_simulated_cloudy.csv",
"umbrella"   = "Estimates_simulated_umbrella.csv",
"ddpcRquant" = "Estimates_simulated_ddpcrquant.csv",
# "EM_t"       = "Estimates_simulated_EM_t (ICL).csv",
# "EM_tskew"   = "Estimates_simulated_EM_tskew (ICL).csv",
"DropEmPCR_t" = "Estimates_simulated_DropEmPCR_t(1).csv",
"DropEmPCR_tskew" = "Estimates_simulated_DropEmPCR_tskew(1).csv"
)
out_dir <- "Results w DropEmPCR"
dir.create(out_dir, recursive = TRUE)
df_res <- NA
for(m in names(filesPerMethod)){
file <- filesPerMethod[[m]]
d <- read.csv(file) %>% dplyr::select(conc, rain_setting, exp, rep, n_tot, TP, TN, FP, FN) %>%
mutate(method = factor(m, levels = names(filesPerMethod)),
concFactor = factor(conc),
rainSettingFactor = factor(rain_setting))
if(all(is.na(df_res))) {
df_res <- d
}else{
df_res <- rbind(df_res, d)
}
}
df_res <-  df_res %>%
mutate(accuracy = (TP + TN)/n_tot,
sensitivity = TP/(TP + FN),
specificity = TN/(TN + FP),
FPR = FP/(TN + FP))
df_res %>% group_by(method) %>%
summarise(mean_acc  = mean(accuracy),    sd_acc  = sd(accuracy),
mean_sens = mean(sensitivity), sd_sens = sd(sensitivity),
mean_spec = mean(specificity), sd_spec = sd(specificity),
mean_fpr  = mean(FPR),         sd_fpr  = sd(FPR)) %>%
write.csv(paste0(out_dir, "/Results summary - Accuracy.csv"))
# Sensitivity - FPR graph
p <- ggplot(df_res, aes(x = FPR, y=sensitivity, col=rainSettingFactor)) +
geom_point() +
geom_line(aes(group=rainSettingFactor)) +
facet_grid(cols=vars(method)) +
scale_color_manual(values = RColorBrewer::brewer.pal(5, "YlOrRd")[2:5],
labels = c("No rain", "Low rain", "Moderate rain", "High rain")) +
theme_bw() +
labs(color = "Rain setting")
ggsave(p, width = 12, height = 3, filename = "Results summary - sensitivity FPR curve.png", path = out_dir)
p <- ggplot(subset(df_res, method %in% c("cloudy", "EM_t", "EM_tskew")),
aes(x = FPR, y=sensitivity, col=rainSettingFactor)) +
geom_point() +
geom_line(aes(group=rainSettingFactor)) +
facet_grid(cols=vars(method)) +
scale_color_manual(values = RColorBrewer::brewer.pal(5, "YlOrRd")[2:5],
labels = c("No rain", "Low rain", "Moderate rain", "High rain")) +
theme_bw() +
labs(color = "Rain setting") +
coord_cartesian(ylim = c(min(sensitivity), 1))
ggsave(p, width = 12, height = 3, filename = "Results summary - sensitivity FPR curve (trimmed).png", path = out_dir)
setwd("D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation")
source("getEquallyLogSpacedIntervals.R")
filesPerMethod <- list(
"cloudy"     = "Estimates_simulated_cloudy.csv",
"umbrella"   = "Estimates_simulated_umbrella.csv",
"ddpcRquant" = "Estimates_simulated_ddpcrquant.csv",
# "EM_t"       = "Estimates_simulated_EM_t (ICL).csv",
# "EM_tskew"   = "Estimates_simulated_EM_tskew (ICL).csv",
"DropEmPCR_t" = "Estimates_simulated_DropEmPCR_t(1).csv",
"DropEmPCR_tskew" = "Estimates_simulated_DropEmPCR_tskew(1).csv"
)
library(dplyr)
library(magrittr)
library(ggplot2)
for(i in 1:length(filesPerMethod)){
df_temp <- read.csv(filesPerMethod[[i]]) %>% mutate(method = names(filesPerMethod)[[i]])
if(i == 1){
df <- df_temp
}else{
if(all(colnames(df) == colnames(df_temp))){
df <- rbind(df, df_temp)
}else{
print(paste0("Not the same column names! ", names(filesPerMethod)[[i]]))
}
}
}
df[['method']] <- factor(df[['method']], levels = unique(df[['method']]))
getLabelData <- function(df, option=1){
# Option 1 : Summarize method across all concs
# Option 2 : Summarize method for each conc
if(option == 1){
labelData <- df %>% dplyr::select(method) %>% distinct()
}else if(option == 2){
labelData <- df %>% dplyr::select(rain_setting, method) %>% distinct()
}
list_res <- list()
for(m in unique(df[['method']])){
print(paste0("method ", m))
x <- subset(df, method==m)
if(option == 1){
res <- getResultStatistics(x)
res$method <- m
list_res[[length(list_res)+1]] <- res
}else if(option == 2){
for(r in unique(x[['rain_setting']])){
print(paste0("rain_setting ", r))
res <- getResultStatistics(subset(x, rain_setting==r))
res$method <- m
res$rain_setting <- r
list_res[[length(list_res)+1]] <- res
}
}
}
labelData <- data.frame(t(matrix(unlist(list_res), ncol=length(list_res))))
colnames(labelData) <- names(list_res[[1]])
labelData[['method']] <- factor(labelData[['method']], levels=unique(df[['method']]))
labelData[['fitRsquared']] <- as.numeric(labelData[['fitRsquared']])
labelData[['fitPval']] <- as.numeric(labelData[['fitPval']])
labelData[['fitResSE']] <- as.numeric(labelData[['fitResSE']])
labelData[['label']] <- apply(labelData, 1, function(x) {
paste0(
"y ~ ",round(as.numeric(x[['beta0']]), 4), " + ",  round(as.numeric(x[['beta1']]), 4), "X\n",
# "beta0 = ", round(as.numeric(x[['beta0']]), 4),"\n",
# "beta1 = ", round(as.numeric(x[['beta1']]), 4),"\n",
"R^2 = ", round(as.numeric(x[['fitRsquared']]), 4),"\n",
# "Pval  = ", round(as.numeric(x[['fitPval']]), 4),"\n",
"Res. SE = ", round(as.numeric(x[['fitResSE']]), 4))
})
return(labelData)
}
getResultStatistics <- function(x){
trueConc <- pull(x, conc)
estConc <- pull(x, estLambda)
fit <- lm(log(trueConc) ~ log(estConc))
fstat <- summary(fit)$fstatistic
fitFormula <-   paste0("y ~ ", round(coefficients(fit)[1],2), " + ",
paste(sprintf("%.2f * %s",
coefficients(fit)[-1],
names(coefficients(fit)[-1])),
collapse=" + ")
)
beta0 <- coefficients(fit)[[1]]
beta1 <- coefficients(fit)[[2]]
fitRsquared <- summary(fit)$r.squared
fitPval <- pf(fstat[['value']], df1 = fstat[['numdf']], df2 = fstat[['dendf']], lower.tail = FALSE)
fitResSE <- summary(fit)$sigma
return(list(beta0 = beta0, beta1 = beta1, fitFormula=fitFormula, fitRsquared=fitRsquared, fitPval=fitPval, fitResSE=fitResSE))
}
addTheme_Common <- function(p, labelData){
log_space <- (log(2.5) - log(0.1))/4
y_min <- exp(log(0.1) - log_space)
y_max <- exp(log(2.5) + log_space)
y_breaks <- c(y_min, getEquallyLogSpacedIntervals(0.1, 2.5, 5), y_max) %>% round(2)
p <- p + geom_abline(slope = 1, color="gray60") +
geom_point() +
geom_smooth(method="lm") +
geom_text(data = labelData, mapping = aes(x = y_min, y = y_max, vjust=1, hjust=0, label=label), color="black", size=2.7) +
scale_y_continuous(breaks=y_breaks, trans = "log", labels = c("", y_breaks[2:6], "")) +
scale_x_continuous(breaks=y_breaks, trans = "log", labels = c("", y_breaks[2:6], "")) +
labs(x="Estimated Concentration (per partition)", y = "True Concentration (per partition)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
axis.text = element_text(size = 6))
}
plotData <- df %>% dplyr::select(conc, rain_setting, estLambda, method) %>% mutate(concFactor = factor(conc)) %>% mutate(Total = "All rain settings")
labelData1 <- getLabelData(df, option=1)
p1 <- ggplot(plotData, aes(x = estLambda, y = conc, color=method)) %>%
addTheme_Common(labelData1) +
facet_grid(rows = vars(method), cols = vars(Total)) +
theme(legend.position = "none")
ggsave(p1, width = 3, height = 7, filename = "Results summary - log linear (across all rain).png")
labelData2 <- getLabelData(df, option=2)
rainLabels <- c("No rain", "Low rain", "Moderate rain", "High rain")
names(rainLabels) <- unique(df[['rain_setting']])
p2 <- ggplot(plotData, aes(x = estLambda, y = conc, color=method)) %>%
addTheme_Common(labelData2) +
facet_grid(rows = vars(method), cols = vars(rain_setting), labeller = labeller(rain_setting = rainLabels))
ggsave(p2, width = 9, height = 7, filename = "Results summary - log linear (per rain).png")
p <- cowplot::plot_grid(p1, NULL, p2, rel_widths = c(0.22, 0.03, 0.75), nrow = 1)
ggsave(p, width = 12, height = 7, filename = "Results summary - log linear (combined and per rain).png")
source("D:/~Masters/~ MS-STAT/~THESIS/Code/utils.R")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
out_dir <- paste0("Results ", format(Sys.time(), format = "(%Y-%m-%d_%H%M%S)"))
dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
list_methods <- list(
list(method = "cloudy", filename = "../Estimates_lievens_cloudy.csv"),
list(method = "umbrella", filename = "../Estimates_lievens_Umbrella.csv"),
# list(method = "em-t", filename = "../Estimates_lievens_EM_t (ICL)2.csv"),
# list(method = "em-tskew", filename = "../Estimates_lievens_EM_tskew (ICL)2.csv"),
list(method = "DropEmPCR-t", filename = "../Estimates_lievens_DropEmPCR_t.csv"),
list(method = "DropEmPCR-tskew", filename = "../Estimates_lievens_DropEmPCR_tskew.csv")
)
for(m in list_methods){
df <- read.csv(m[['filename']]) %>%
mutate(Enhancer = ifelse(is.na(Enhancer), "NA", Enhancer),
Primers = as.character(Primers),
Conc = as.character(Conc),
Enhancer = as.character(Enhancer),
Cycles = as.character(Cycles),
Sonication = as.character(Sonication)) %>%
mutate(method = m[['method']]) %>%
filter(react.ID != 358 & react.ID != 383) %>%
select(method, react.ID,plate.ID,Target,Conc,Primers,Probe,Anneal,Touchdown,Enhancer,Cycles,Sonication,n_neg,n_rain,n_pos,n_total,estLambda,estLambda_l,estLambda_u) %>%
mutate(plate.ID2 = case_when(plate.ID != 5 ~ paste0(plate.ID),
plate.ID == 5 ~ paste0(plate.ID, " (conc ", Conc, ")")))
df2 <- df %>% mutate(subfactor_label = case_when(plate.ID %in% c(1, 7, 8, 9) ~ paste0(Target),
plate.ID == 2 ~ paste(Target, "Primers", Primers),
plate.ID == 3 ~ paste(Target, "Conc", Conc),
plate.ID == 4 ~ paste(Target, "Enhancer", Enhancer),
plate.ID == 5 ~ paste(Target, "Conc", Conc, "Cycles", Cycles),
plate.ID == 6 ~ paste(Target, "Sonication", Sonication)
),
subfactors = case_when(plate.ID %in% c(1, 7, 8, 9) ~ "",
plate.ID == 2 ~ "Primers",
plate.ID == 3 ~ "Conc",
plate.ID == 4 ~ "Enhancer",
plate.ID == 5 ~ "Cycles",
plate.ID == 6 ~ "Sonication"))
if(list_methods[[1]][['filename']] == m[['filename']]){
df_combined <- df2
}else{
df_combined <- rbind(df_combined, df2)
}
# break
}
source("D:/~Masters/~ MS-STAT/~THESIS/Code/utils.R")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
out_dir <- paste0("Results ", format(Sys.time(), format = "(%Y-%m-%d_%H%M%S)"))
dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
list_methods <- list(
list(method = "cloudy", filename = "../Estimates_lievens_cloudy.csv"),
list(method = "umbrella", filename = "../Estimates_lievens_Umbrella.csv"),
# list(method = "em-t", filename = "../Estimates_lievens_EM_t (ICL)2.csv"),
# list(method = "em-tskew", filename = "../Estimates_lievens_EM_tskew (ICL)2.csv"),
list(method = "DropEmPCR-t", filename = "../Estimates_lievens_DropEmPCR_t.csv"),
list(method = "DropEmPCR-tskew", filename = "../Estimates_lievens_DropEmPCR_tskew.csv")
)
source("D:/~Masters/~ MS-STAT/~THESIS/Code/utils.R")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
out_dir <- paste0("Results ", format(Sys.time(), format = "(%Y-%m-%d_%H%M%S)"))
dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
list_methods <- list(
list(method = "cloudy", filename = "../Estimates_lievens_cloudy.csv"),
list(method = "umbrella", filename = "../Estimates_lievens_Umbrella.csv"),
# list(method = "em-t", filename = "../Estimates_lievens_EM_t (ICL)2.csv"),
# list(method = "em-tskew", filename = "../Estimates_lievens_EM_tskew (ICL)2.csv"),
list(method = "DropEmPCR-t", filename = "../Estimates_lievens_DropEmPCR_t.csv"),
list(method = "DropEmPCR-tskew", filename = "../Estimates_lievens_DropEmPCR_tskew.csv")
)
for(m in list_methods){
df <- read.csv(m[['filename']]) %>%
mutate(Enhancer = ifelse(is.na(Enhancer), "NA", Enhancer),
Primers = as.character(Primers),
Conc = as.character(Conc),
Enhancer = as.character(Enhancer),
Cycles = as.character(Cycles),
Sonication = as.character(Sonication)) %>%
mutate(method = m[['method']]) %>%
filter(react.ID != 358 & react.ID != 383) %>%
select(method, react.ID,plate.ID,Target,Conc,Primers,Probe,Anneal,Touchdown,Enhancer,Cycles,Sonication,n_neg,n_rain,n_pos,n_total,estLambda,estLambda_l,estLambda_u) %>%
mutate(plate.ID2 = case_when(plate.ID != 5 ~ paste0(plate.ID),
plate.ID == 5 ~ paste0(plate.ID, " (conc ", Conc, ")")))
df2 <- df %>% mutate(subfactor_label = case_when(plate.ID %in% c(1, 7, 8, 9) ~ paste0(Target),
plate.ID == 2 ~ paste(Target, "Primers", Primers),
plate.ID == 3 ~ paste(Target, "Conc", Conc),
plate.ID == 4 ~ paste(Target, "Enhancer", Enhancer),
plate.ID == 5 ~ paste(Target, "Conc", Conc, "Cycles", Cycles),
plate.ID == 6 ~ paste(Target, "Sonication", Sonication)
),
subfactors = case_when(plate.ID %in% c(1, 7, 8, 9) ~ "",
plate.ID == 2 ~ "Primers",
plate.ID == 3 ~ "Conc",
plate.ID == 4 ~ "Enhancer",
plate.ID == 5 ~ "Cycles",
plate.ID == 6 ~ "Sonication"))
if(list_methods[[1]][['filename']] == m[['filename']]){
df_combined <- df2
}else{
df_combined <- rbind(df_combined, df2)
}
# break
}
plotData <- df_combined %>% group_by(method, plate.ID, subfactor_label) %>%
summarise(cv = sd(estLambda)/mean(estLambda)) %>%
mutate(cv_inv = 1-cv,
method = factor(method, levels = listOfList_toColumn(list_methods, "method"))) %>%
filter(plate.ID != 8)
p <- ggplot(plotData, aes(x=method, y=cv, color=method, fill = method)) +
geom_violin(alpha=0.4, lwd=0.5) +
labs(title = "CV Distribution",
subtitle = "For estimated concentrations of all experiments") +
theme_bw()
ggsave(p, filename = "CV Distribution (overall).png", path = out_dir, width = 7, height = 4.5)
p <- p + facet_wrap(~ plate.ID, ncol = 3, scales = "free") +
labs(subtitle = "For estimated concentrations per plate experiment") +
theme_bw()
ggsave(p, filename = "CV Distribution (per plate).png", path = out_dir, width = 10, height = 7)
for(i in unique(df_combined$plate.ID2)){
plotData <- filter(df_combined, plate.ID2 == i) %>% mutate(method = factor(method, levels = listOfList_toColumn(list_methods, "method")))
max_n_reps <- plotData %>% group_by(method, subfactor_label) %>% summarise(n = n()) %>% pull() %>% max()
if(max_n_reps <= 8) {
pd <- position_dodge(0.75)
}else if(max_n_reps >= 16){
pd <- position_dodge(1)
}else {
pd <- position_dodge(0.5)
}
n_targets <- length(unique(plotData[['Target']]))
if(n_targets == 2){
facet_ncols <- 1
}else if(max_n_reps >= 8){
facet_ncols <- 2
}else{
facet_ncols <- 3
}
subfactor <- plotData[['subfactors']][[1]]
if(subfactor == ""){
p <- ggplot(plotData, aes_string(x = "method", y = "estLambda", color = "method", group="react.ID", label="react.ID"))
}else{
p <- ggplot(plotData, aes_string(x = "method", y = "estLambda", color = "method", group="react.ID", label="react.ID", shape = subfactor))
}
p <- p +geom_pointrange(aes( ymin = estLambda_l, ymax = estLambda_u), position=pd) +
labs(title = paste("Plate", i), y = "Estimated DNA concentration (per partition)") +
facet_wrap(~ Target, ncol=ifelse(n_targets == 2, 1, 3), scales = "free")+
theme_light() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# print(p)
ggsave(p, filename = paste0("Plate ", i,".png"), path = out_dir, width = 11, height = 8)
p_labeled <- p + geom_text_repel(direction = "x", segment.alpha = 0.3, size = 2.5, position = pd)
ggsave(p_labeled, filename = paste0("Plate ", i," (w label).png"), path = out_dir, width = 11, height = 8)
p <- ggplot(plotData, aes_string(x = "method", y = "estLambda", color = "method", label="react.ID")) +
geom_boxplot() +
labs(title = paste("Plate", i), y = "Estimated DNA concentration (per partition)") +
facet_wrap(~ Target, ncol=ifelse(n_targets == 2, 1, 3), scales = "free")+
theme_light() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(p, filename = paste0("Boxplot - Plate ", i,".png"), path = out_dir, width = 11, height = 8)
}
plotData <- df_combined %>% filter(plate.ID == 3) %>%
mutate(logConc = log(as.numeric(Conc), base = 2) - (log(250, base = 2)-1))
plotData <- plotData %>%
filter(method != "em-tskew")
p <- ggplot(plotData, aes(x = estLambda, y = logConc, color=method)) +
geom_point() +
geom_smooth(method="lm") +
facet_grid(rows = vars(method)) +
ylim(c(min(plotData$logConc), max(plotData$logConc))) +
theme_bw()
ggsave(p, filename = "Log-linear.png", path = out_dir, width = 5, height = 8)
p <- ggplot(plotData, aes(x = estLambda, y = logConc, color=method)) +
geom_point() +
geom_smooth(method="lm") +
facet_grid(rows = vars(method)) +
# ylim(c(min(plotData$logConc), max(plotData$logConc))) +
theme_bw()
ggsave(p, filename = "Log-linear.png", path = out_dir, width = 5, height = 8)
