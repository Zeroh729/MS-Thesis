# main(classifier="EM (BIC)", plot="histWDens", saveImg = TRUE)
# main(classifier="EM (ICL)", plot="histWDens", saveImg = TRUE)
# main(classifier="EM_tskew (ICL)", plot="histWDens", saveImg = TRUE)
# graphPlateTarget(3,"TC1507", "EM_tskew (BIC)", plot="histWDens", saveImg = FALSE)
# graphPlateTarget(4,"TC1507", "EM", plot="histWDens", saveImg = FALSE)
# graphPlateTarget(7,"M88017", "EM", plot="histWDens", saveImg = FALSE)
# Previous Codes
# ["le1", "cru", hmg", "acp", "M810", "TC1507", "M88017", "M1445", "GTS4032", "M88701","M89788","GT73"]
# graphPlateTarget(3, "M88017", classifier = "", saveImg = T) # [TC1507, M88017]
# graphPlateTarget(4, "TC1507", classifier = "", saveImg = T) # [TC1507, M88017]
res <- vecFlou_toDf(x,  "EM_tskew (BIC)")
source('D:/~Masters/~ MS-STAT/~THESIS/Code/classifier_EM_tskew.R', echo=TRUE)
res <- vecFlou_toDf(x,  "EM_tskew (BIC)")
View(res)
res[[2]][["emres"]][["em"]][["mu"]]
res2 <- vecFlou_toDf(x,  "EM_t (BIC)")
vecFlou_toDf  <- function(flou, classifier=""){
flou <- prepareFlou(flou)
obs <- c(1:length(flou))
cl <- rep("drp", length(flou))
res_info <- list(classifier=classifier)
mainClassifier <- strsplit(classifier, " ")[[1]][1]
criteria <- gsub("(\\(|\\))", "", strsplit(classifier, " ")[[1]][2])
if(mainClassifier == "cloudy"){
cl <- cloudyClassifier(flou)
cl <- factor(cl, levels = c("pos", "neg",  "rain"))
}else if(mainClassifier == "cloudy_rain"){
cl <- cloudyClassifier(flou, showRain = TRUE)
cl <- factor(cl, levels = c("pos", "neg",  "rain"))
}else if(mainClassifier == "EM"){
criteria <- if(is.na(criteria)) "BIC" else criteria
res <- emclassifier(flou, volDrp=0.85, crit = criteria)
cl <- res$classification
cl <- factor(cl, levels = c("pos", "neg",  "rain"))
# TODO - Move all this in emclassifier function
estParam <- data.frame(Mu = res$em$Mu, Sigma = sqrt(res$em$LTSigma), MixProp = res$em$pi) %>%
mutate(NegThres = rep(res$negThres, nrow(.))) %>%
mutate(PosThres = rep(res$posThres, nrow(.))) %>%
arrange(Mu)
res_info$est_parameter <- estParam
G <- res$G
title <- bquote("Neg~N("~mu==.(round(estParam[1,"Mu"],2))~","~sigma==.(round(estParam[1,"Sigma"],2))~")")
subtitle <- bquote("Pos~N("~mu==.(round(estParam[G,"Mu"],2))~","~sigma==.(round(estParam[G,"Sigma"],2))~")")
if(G == 3){
res_info$desc <- bquote("Rain~N("~mu==.(round(estParam[2,"Mu"],2))~","~sigma==.(round(estParam[2,"Sigma"],2))~")")
}
res_info$G <- G
res_info$title <- title
res_info$subtitle <- subtitle
}else if(mainClassifier == "EM_t"){
criteria <- if(is.na(criteria)) "BIC" else criteria
res_info <- emclassifier_t(flou, volDrp=0.85, crit = criteria)
cl <- res_info$classification
cl <- factor(cl, levels = c("pos", "neg",  "rain"))
}else if(mainClassifier == "EM_tskew"){
criteria <- if(is.na(criteria)) "BIC" else criteria
res_info <- emclassifier_tskew(vecFluo = flou, volDrp = 0.85, crit = criteria)
cl <- res_info$classification
cl <- factor(cl, levels = c("pos", "neg",  "rain"))
}
res_info$classifier <- mainClassifier
res_info$criteria <- if(is.na(criteria)) "" else paste0("(",criteria,")")
data <- data.frame(flou, obs, cl)
return(list(data, res_info))
}
source('D:/~Masters/~ MS-STAT/~THESIS/Code/classifier_EM_tskew.R', echo=TRUE)
res2 <- vecFlou_toDf(x,  "EM_t (BIC)")
get_resInfo <- function(res, distr){
res_info <- list()
G <- res$G
if(distr == "mst"){
estParam <- data.frame(Mu = c(res$em$mu), Sigma = sqrt(c(res$em$sigma)), Df = res$em$dof, Skew = c(res$em$delta), MixProp = res$em$pro) %>%
mutate(NegThres = rep(res$negThres, nrow(.))) %>%
mutate(PosThres = rep(res$posThres, nrow(.))) %>%
arrange(Mu)
title <- bquote("Neg~"~t~"("~v==.(round(estParam[1,"Df"],2))~","~mu==.(round(estParam[1,"Mu"],2))~","~sigma==.(round(estParam[1,"Sigma"],2))~","~delta==.(round(estParam[1,"Skew"],2))~")")
subtitle <- bquote("Pos~"~t~"("~v==.(round(estParam[G,"Df"],2))~","~mu==.(round(estParam[G,"Mu"],2))~","~sigma==.(round(estParam[G,"Sigma"],2))~","~delta==.(round(estParam[G,"Skew"],2))~")")
if(G == 3){
res_info$desc <- bquote("Rain~"~t~"("~v==.(round(estParam[2,"Df"],2))~","~mu==.(round(estParam[2,"Mu"],2))~","~sigma==.(round(estParam[2,"Sigma"],2))~","~delta==.(round(estParam[2,"Skew"],2))~")")
}
}else if(distr == "mvt"){
estParam <- data.frame(Mu = c(res$em$mu), Sigma = sqrt(c(res$em$sigma)), Df = res$em$dof, MixProp = res$em$pro) %>%
mutate(NegThres = rep(res$negThres, nrow(.))) %>%
mutate(PosThres = rep(res$posThres, nrow(.))) %>%
arrange(Mu)
title <- bquote("Neg~"~t~"("~v==.(round(estParam[1,"Df"],2))~","~mu==.(round(estParam[1,"Mu"],2))~","~sigma==.(round(estParam[1,"Sigma"],2))~")")
subtitle <- bquote("Pos~"~t~"("~v==.(round(estParam[G,"Df"],2))~","~mu==.(round(estParam[G,"Mu"],2))~","~sigma==.(round(estParam[G,"Sigma"],2))~")")
if(G == 3){
res_info$desc <- bquote("Rain~"~t~"("~v==.(round(estParam[2,"Df"],2))~","~mu==.(round(estParam[2,"Mu"],2))~","~sigma==.(round(estParam[2,"Sigma"],2))~")")
}
}
res_info$est_parameter <- estParam
res_info$classification <- res$classification
res_info$G <- G
res_info$emres <- res
res_info$title <- title
res_info$subtitle <- subtitle
return(res_info)
}
res2 <- vecFlou_toDf(x,  "EM_t (BIC)")
View(res2)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/classifier_EM_tskew.R', echo=TRUE)
res <- vecFlou_toDf(x,  "EM_tskew (BIC)")
View(res)
table(res[[1]]$cl)
em_tskew <- function(drp, volDrp, distr, crit="BIC"){
getClusMemberProb <- function(emres){
clusterMem <- emres$tau
means <- emres$modpts
posClust <- which.max(means)
negClust <- which.min(means)
rainClust <- if(length(means)==3) which(means == median(means)) else NA
clusts <- c(posClust, negClust, rainClust)
names(clusts) <- c("pos", "neg", "rain")
clusts <- sort(clusts)
classification <- factor(names(clusts[emres$clust]), levels = c("pos", "neg",  "rain"))
print(paste("Negative Mu:", means[negClust], "Positive Mu:", means[posClust]))
if(!is.na(rainClust))
print(paste("Rain Mu:", means[rainClust]))
posMemberProb <- clusterMem[,posClust]
negMemberProb <- clusterMem[,negClust]
rainMemberProb <- clusterMem[,rainClust]
return(list(negMemberProb,posMemberProb, classification))
}
getInitParams <- function(drp, G){
set.seed(1234)
initEM <- init.EM(drp, nclass = G)
initEMSkew <- list(mu = t(initEM$Mu),
sigma = array(c(initEM$LTSigma), c(1,1,G)),
pro = initEM$pi,
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
writeLines(paste("Initial parameters for G=", G))
writeLines(paste("Mu = ", initEMSkew$mu))
writeLines(paste("Sigma = ", initEMSkew$sigma))
writeLines(paste("Pi = ", initEMSkew$pro))
return(initEMSkew)
}
set.seed(1234)
# Manual - https://cran.r-project.org/web/packages/EMMIXskew/EMMIXskew.pdf; ncov = 3 means general variance (1 & 2 gives me equal variances)
emres_G2 <- EmSkew(drp, init = getInitParams(drp, G = 2), g = 2, nkmeans = 2, nrandom = 2, distr = distr, ncov = 3, initloop = 20, debug = FALSE) # MAIN FUNCTION
emres_G3 <- EmSkew(drp, init = getInitParams(drp, G = 3), g = 3, nkmeans = 3, nrandom = 3, distr = distr, ncov = 3, initloop = 20, debug = FALSE) # MAIN FUNCTION
if(crit == "BIC"){
scoreG2 <- emres_G2$bic
scoreG3 <- emres_G3$bic
}else if(crit == "ICL"){
scoreG2 <- emres_G2$ICL
scoreG3 <- emres_G3$ICL
}else if(crit == "AIC"){
scoreG2 <- emres_G2$aic
scoreG3 <- emres_G3$aic
}
if(scoreG3 < scoreG2){
emres <- emres_G3
emres_lower <- emres_G2
G <- 3
}else{
emres <- emres_G2
emres_lower <- emres_G3
G <- 2
}
.g(negMemberProb, posMemberProb, classification) %=% getClusMemberProb(emres)
nneg <- sum(classification == "neg")
res <- list()
res$est <- cal_concentration(nneg, nrow(drp),volDrp)
res$member <- list(negProb = negMemberProb, posProb = posMemberProb)
res$G <- G
res$em <- emres
res$em_lower <- emres_lower
res$crit <- crit
res$critScore <- min(scoreG2, scoreG3)
res$bestmodel <- paste(paste(crit, "of G=2 is",scoreG2), paste(crit, "of G=3 is", scoreG3), sep = "\n")
res$classification <- classification
res$negThres <- drp[max(which(classification == "neg")),]
res$posThres <- drp[min(which(classification == "pos")),]
return(res)
}
res <- vecFlou_toDf(x,  "EM_tskew (BIC)")
table(res[[1]]$cl)
x <- df_orig[df_orig$react.ID == 209, ][,-(1:11)]
x <- t(x)
x <- prepareFlou(x)
res <- emclassifier_tskew(x, crit = "BIC")
res <- emclassifier_tskew(x, volDrp = 0.85, crit = "BIC")
source('D:/~Masters/~ MS-STAT/~THESIS/Code/classifier_EM_tskew.R', echo=TRUE)
res <- emclassifier_tskew(x, volDrp = 0.85, crit = "BIC")
View(res2)
View(res)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/classifier_EM_tskew.R', echo=TRUE)
res <- emclassifier_tskew(x, volDrp = 0.85, crit = "BIC")
View(res)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/classifier_EM_tskew.R', echo=TRUE)
res <- emclassifier_tskew(x, volDrp = 0.85, crit = "BIC")
View(res)
source("D:/~Masters/~ MS-STAT/~THESIS/Code/utils.R")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
out_dir <- paste0("Results ", format(Sys.time(), format = "(%Y-%m-%d_%H%M%S)"))
dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
list_methods <- list(
list(method = "cloudy", filename = "../Estimates_lievens_cloudy.csv"),
list(method = "umbrella", filename = "../Estimates_lievens_Umbrella.csv"),
list(method = "em-t", filename = "../Estimates_lievens_EM_t (BIC).csv"),
list(method = "em-tskew", filename = "../Estimates_lievens_EM_tskew (BIC)2.csv"))
for(m in list_methods){
df <- read.csv(m[['filename']]) %>%
mutate(Enhancer = ifelse(is.na(Enhancer), "NA", Enhancer),
Primers = as.character(Primers),
Conc = as.character(Conc),
Enhancer = as.character(Enhancer),
Cycles = as.character(Cycles),
Sonication = as.character(Sonication)) %>%
mutate(method = m[['method']]) %>%
filter(react.ID != 358 & react.ID != 383) %>%
select(method, react.ID,plate.ID,Target,Conc,Primers,Probe,Anneal,Touchdown,Enhancer,Cycles,Sonication,n_neg,n_rain,n_pos,n_total,estLambda,estLambda_l,estLambda_u) %>%
mutate(plate.ID2 = case_when(plate.ID != 5 ~ paste0(plate.ID),
plate.ID == 5 ~ paste0(plate.ID, " (conc ", Conc, ")")))
df2 <- df %>% mutate(subfactor_label = case_when(plate.ID %in% c(1, 7, 8, 9) ~ paste0(Target),
plate.ID == 2 ~ paste(Target, "Primers", Primers),
plate.ID == 3 ~ paste(Target, "Conc", Conc),
plate.ID == 4 ~ paste(Target, "Enhancer", Enhancer),
plate.ID == 5 ~ paste(Target, "Conc", Conc, "Cycles", Cycles),
plate.ID == 6 ~ paste(Target, "Sonication", Sonication)
),
subfactors = case_when(plate.ID %in% c(1, 7, 8, 9) ~ "",
plate.ID == 2 ~ "Primers",
plate.ID == 3 ~ "Conc",
plate.ID == 4 ~ "Enhancer",
plate.ID == 5 ~ "Cycles",
plate.ID == 6 ~ "Sonication"))
if(list_methods[[1]][['filename']] == m[['filename']]){
df_combined <- df2
}else{
df_combined <- rbind(df_combined, df2)
}
# break
}
source("D:/~Masters/~ MS-STAT/~THESIS/Code/utils.R")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
out_dir <- paste0("Results ", format(Sys.time(), format = "(%Y-%m-%d_%H%M%S)"))
dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
list_methods <- list(
list(method = "cloudy", filename = "../Estimates_lievens_cloudy.csv"),
list(method = "umbrella", filename = "../Estimates_lievens_Umbrella.csv"),
list(method = "em-t", filename = "../Estimates_lievens_EM_t (BIC)2.csv"),
list(method = "em-tskew", filename = "../Estimates_lievens_EM_tskew (BIC).csv"))
for(m in list_methods){
df <- read.csv(m[['filename']]) %>%
mutate(Enhancer = ifelse(is.na(Enhancer), "NA", Enhancer),
Primers = as.character(Primers),
Conc = as.character(Conc),
Enhancer = as.character(Enhancer),
Cycles = as.character(Cycles),
Sonication = as.character(Sonication)) %>%
mutate(method = m[['method']]) %>%
filter(react.ID != 358 & react.ID != 383) %>%
select(method, react.ID,plate.ID,Target,Conc,Primers,Probe,Anneal,Touchdown,Enhancer,Cycles,Sonication,n_neg,n_rain,n_pos,n_total,estLambda,estLambda_l,estLambda_u) %>%
mutate(plate.ID2 = case_when(plate.ID != 5 ~ paste0(plate.ID),
plate.ID == 5 ~ paste0(plate.ID, " (conc ", Conc, ")")))
df2 <- df %>% mutate(subfactor_label = case_when(plate.ID %in% c(1, 7, 8, 9) ~ paste0(Target),
plate.ID == 2 ~ paste(Target, "Primers", Primers),
plate.ID == 3 ~ paste(Target, "Conc", Conc),
plate.ID == 4 ~ paste(Target, "Enhancer", Enhancer),
plate.ID == 5 ~ paste(Target, "Conc", Conc, "Cycles", Cycles),
plate.ID == 6 ~ paste(Target, "Sonication", Sonication)
),
subfactors = case_when(plate.ID %in% c(1, 7, 8, 9) ~ "",
plate.ID == 2 ~ "Primers",
plate.ID == 3 ~ "Conc",
plate.ID == 4 ~ "Enhancer",
plate.ID == 5 ~ "Cycles",
plate.ID == 6 ~ "Sonication"))
if(list_methods[[1]][['filename']] == m[['filename']]){
df_combined <- df2
}else{
df_combined <- rbind(df_combined, df2)
}
# break
}
plotData <- df_combined %>% group_by(method, plate.ID, subfactor_label) %>%
summarise(cv = sd(estLambda)/mean(estLambda)) %>%
mutate(cv_inv = 1-cv,
method = factor(method, levels = listOfList_toColumn(list_methods, "method"))) %>%
filter(plate.ID != 8)
p <- ggplot(plotData, aes(x=method, y=cv, color=method, fill = method)) +
geom_violin(alpha=0.4, lwd=0.5) +
labs(title = "CV Distribution",
subtitle = "For estimated concentrations of all experiments") +
theme_bw()
ggsave(p, filename = "CV Distribution (overall).png", path = out_dir, width = 7, height = 4.5)
p <- p + facet_wrap(~ plate.ID, ncol = 3, scales = "free") +
labs(subtitle = "For estimated concentrations per plate experiment") +
theme_bw()
ggsave(p, filename = "CV Distribution (per plate).png", path = out_dir, width = 10, height = 7)
for(i in unique(df_combined$plate.ID2)){
plotData <- filter(df_combined, plate.ID2 == i) %>% mutate(method = factor(method, levels = listOfList_toColumn(list_methods, "method")))
max_n_reps <- plotData %>% group_by(method, subfactor_label) %>% summarise(n = n()) %>% pull() %>% max()
if(max_n_reps <= 8) {
pd <- position_dodge(0.75)
}else if(max_n_reps >= 16){
pd <- position_dodge(1)
}else {
pd <- position_dodge(0.5)
}
n_targets <- length(unique(plotData[['Target']]))
if(n_targets == 2){
facet_ncols <- 1
}else if(max_n_reps >= 8){
facet_ncols <- 2
}else{
facet_ncols <- 3
}
subfactor <- plotData[['subfactors']][[1]]
if(subfactor == ""){
p <- ggplot(plotData, aes_string(x = "method", y = "estLambda", color = "method", group="react.ID", label="react.ID"))
}else{
p <- ggplot(plotData, aes_string(x = "method", y = "estLambda", color = "method", group="react.ID", label="react.ID", shape = subfactor))
}
p <- p +geom_pointrange(aes( ymin = estLambda_l, ymax = estLambda_u), position=pd) +
labs(title = paste("Plate", i), y = "Estimated DNA concentration (per partition)") +
facet_wrap(~ Target, ncol=ifelse(n_targets == 2, 1, 3), scales = "free")+
theme_light() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# print(p)
ggsave(p, filename = paste0("Plate ", i,".png"), path = out_dir, width = 11, height = 8)
p_labeled <- p + geom_text_repel(direction = "x", segment.alpha = 0.3, size = 2.5, position = pd)
ggsave(p_labeled, filename = paste0("Plate ", i," (w label).png"), path = out_dir, width = 11, height = 8)
p <- ggplot(plotData, aes_string(x = "method", y = "estLambda", color = "method", label="react.ID")) +
geom_boxplot() +
labs(title = paste("Plate", i), y = "Estimated DNA concentration (per partition)") +
facet_wrap(~ Target, ncol=ifelse(n_targets == 2, 1, 3), scales = "free")+
theme_light() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(p, filename = paste0("Boxplot - Plate ", i,".png"), path = out_dir, width = 11, height = 8)
}
plotData <- df_combined %>% filter(plate.ID == 3) %>% mutate(logConc = log(as.numeric(Conc), base = 2) - (log(250, base = 2)-1)) %>%
filter(method != "em-tskew")
p <- ggplot(plotData, aes(x = estLambda, y = logConc, color=method)) +
geom_point() +
geom_smooth(method="lm") +
facet_grid(rows = vars(method)) +
ylim(c(min(plotData$logConc), max(plotData$logConc))) +
theme_bw()
ggsave(p, filename = "Log-linear.png", path = out_dir, width = 5, height = 8)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/classifier_EM_tskew.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
list.files(pattern = ".csv")
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
rlang::trace_back()
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
mainEM_orCloudy <- function(method){
x <- foreach(f = list.files(pattern = ".csv"), .combine = c) %:%
foreach(t = 1:3) %do% {
writeLines(paste0("f ", f))
writeLines(paste0("t ", t))
target <- read.csv(f)[,t]  # only read columns Target1-3, no need for NTC
return(1)
if(method == "EM"){
emres <- emclassifier(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "EM_t"){
emres <- emclassifier_t(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "EM_tskew"){
emres <- emclassifier_tskew(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "cloudy"){
res <- cloudyClassifier(target, showRain = TRUE)
classification <- res
}
n_neg <- sum(classification == "neg")
n_rain <- sum(classification == "rain")
n_pos <- sum(classification == "pos")
resultList <- getResultList(drp_classification = classification, n_neg = n_neg, n_pos = n_pos, n_rain = n_rain, filename = f, rep = t)
return(resultList)
}
return(x)
}
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
mainEM_orCloudy <- function(method){
x <- foreach(f = list.files(pattern = ".csv"), .combine = c) %:%
foreach(t = 1:3) %do% {
writeLines(paste0("f ", f))
writeLines(paste0("t ", t))
target <- read.csv(f)[,t]  # only read columns Target1-3, no need for NTC
return(0)
# if(method == "EM"){
#   emres <- emclassifier(target, volDrp = 0.85, crit = "ICL")
#   classification <- emres$classification[order(target)]
# }else if(method == "EM_t"){
#   emres <- emclassifier_t(target, volDrp = 0.85, crit = "ICL")
#   classification <- emres$classification[order(target)]
# }else if(method == "EM_tskew"){
#   emres <- emclassifier_tskew(target, volDrp = 0.85, crit = "ICL")
#   classification <- emres$classification[order(target)]
# }else if(method == "cloudy"){
#   res <- cloudyClassifier(target, showRain = TRUE)
#   classification <- res
# }
#
# n_neg <- sum(classification == "neg")
# n_rain <- sum(classification == "rain")
# n_pos <- sum(classification == "pos")
# resultList <- getResultList(drp_classification = classification, n_neg = n_neg, n_pos = n_pos, n_rain = n_rain, filename = f, rep = t)
# return(resultList)
}
return(x)
}
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R')
mainEM_orCloudy <- function(method){
x <- foreach(f = list.files(pattern = ".csv"), .combine = c) %:%
foreach(t = 1:3) %dopar% {
writeLines(paste0("f ", f))
writeLines(paste0("t ", t))
target <- read.csv(f)[,t]  # only read columns Target1-3, no need for NTC
return(0)
# if(method == "EM"){
#   emres <- emclassifier(target, volDrp = 0.85, crit = "ICL")
#   classification <- emres$classification[order(target)]
# }else if(method == "EM_t"){
#   emres <- emclassifier_t(target, volDrp = 0.85, crit = "ICL")
#   classification <- emres$classification[order(target)]
# }else if(method == "EM_tskew"){
#   emres <- emclassifier_tskew(target, volDrp = 0.85, crit = "ICL")
#   classification <- emres$classification[order(target)]
# }else if(method == "cloudy"){
#   res <- cloudyClassifier(target, showRain = TRUE)
#   classification <- res
# }
#
# n_neg <- sum(classification == "neg")
# n_rain <- sum(classification == "rain")
# n_pos <- sum(classification == "pos")
# resultList <- getResultList(drp_classification = classification, n_neg = n_neg, n_pos = n_pos, n_rain = n_rain, filename = f, rep = t)
# return(resultList)
}
return(x)
}
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
mainEM_orCloudy <- function(method){
x <- foreach(f = list.files(pattern = ".csv")[1], .combine = c) %:%
foreach(t = 1:3) %do% {
writeLines(paste0("f ", f))
writeLines(paste0("t ", t))
target <- read.csv(f)[,t]  # only read columns Target1-3, no need for NTC
if(method == "EM"){
emres <- emclassifier(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "EM_t"){
emres <- emclassifier_t(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "EM_tskew"){
emres <- emclassifier_tskew(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "cloudy"){
res <- cloudyClassifier(target, showRain = TRUE)
classification <- res
}
n_neg <- sum(classification == "neg")
n_rain <- sum(classification == "rain")
n_pos <- sum(classification == "pos")
resultList <- getResultList(drp_classification = classification, n_neg = n_neg, n_pos = n_pos, n_rain = n_rain, filename = f, rep = t)
return(resultList)
}
return(x)
}
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
mainEM_orCloudy <- function(method){
x <- foreach(f = list.files(pattern = ".csv")[1], .combine = c) %:%
foreach(t = 1:3) %dopar% {
writeLines(paste0("f ", f))
writeLines(paste0("t ", t))
target <- read.csv(paste0("D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/simulated3/",f))[,t]  # only read columns Target1-3, no need for NTC
if(method == "EM"){
emres <- emclassifier(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "EM_t"){
emres <- emclassifier_t(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "EM_tskew"){
emres <- emclassifier_tskew(target, volDrp = 0.85, crit = "ICL")
classification <- emres$classification[order(target)]
}else if(method == "cloudy"){
res <- cloudyClassifier(target, showRain = TRUE)
classification <- res
}
n_neg <- sum(classification == "neg")
n_rain <- sum(classification == "rain")
n_pos <- sum(classification == "pos")
resultList <- getResultList(drp_classification = classification, n_neg = n_neg, n_pos = n_pos, n_rain = n_rain, filename = f, rep = t)
return(resultList)
}
return(x)
}
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/estimateDNAConc.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/estimateDNAConc.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/estimateDNAConc.R', echo=TRUE)
source('D:/~Masters/~ MS-STAT/~THESIS/Code/codes for simulation/3 - simulation/estimateDNAConc_jacobs.R', echo=TRUE)
